//@version=6
contractQty = input.int(1, title="Contracts per Trade")

strategy("Adaptive Supertrend Strategy (ML-inspired) v1", overlay = true , default_qty_type = strategy.fixed , default_qty_value= 1, commission_type = strategy.commission.percent, commission_value = 0.03, pyramiding = 1)


// === CONFIGURATION ===
baseATRlen    = input.int(10, title="Base ATR Length")
baseFactor    = input.float(1.2, title="Base ATR Multiplier")
minATRlen     = input.int(5, title="Min ATR Length")
maxATRlen     = input.int(20, title="Max ATR Length")
minFactor     = input.float(2.0, title="Min ATR Multiplier")
maxFactor     = input.float(4.0, title="Max ATR Multiplier")
volLookback   = input.int(50, title="Volatility Lookback Period")
highVolThresh = input.float(1.5, title="High Volatility Threshold")
lowVolThresh  = input.float(0.75, title="Low Volatility Threshold")

// === VOLATILITY ANALYSIS ===
atrShort = ta.atr(baseATRlen)
atrLong  = ta.atr(volLookback)
atrLongSafe = nz(atrLong, atrShort)
volRatio = atrShort / atrLongSafe

// Regime logic: 1 = High Vol, 0 = Neutral, -1 = Low Vol
regime = volRatio > highVolThresh ? 1 : volRatio < lowVolThresh ? -1 : 0

// === ADAPTIVE PARAMETERS ===
targetLen    = regime == 1 ? maxATRlen : regime == -1 ? minATRlen : baseATRlen
targetFactor = regime == 1 ? maxFactor : regime == -1 ? minFactor : baseFactor

// Smooth factor transition to avoid sudden jumps
var float currFactor = baseFactor
currFactor := currFactor + 0.2 * (targetFactor - currFactor)

// ATR selection based on regime (discrete for stability)
atrMax = ta.atr(maxATRlen)
atrMin = ta.atr(minATRlen)
atrBase = ta.atr(baseATRlen)
atrUsed = regime == 1 ? atrMax : regime == -1 ? atrMin : atrBase

// === SUPERTREND CORE ===
price = hl2
upperBand = price + currFactor * atrUsed
lowerBand = price - currFactor * atrUsed

var float st = na
var int trend = 1

prevSt = nz(st[1], price)
prevTrend = nz(trend[1], 1)

newTrend = prevTrend
newSt = prevSt

if prevTrend == 1
    if close < lowerBand[1]
        newTrend := -1
        newSt := upperBand
    else
        newTrend := 1
        newSt := math.max(lowerBand, prevSt)
else
    if close > upperBand[1]
        newTrend := 1
        newSt := lowerBand
    else
        newTrend := -1
        newSt := math.min(upperBand, prevSt)

trend := newTrend
st := newSt

// === STRATEGY EXECUTION ===
flip = ta.change(trend)
longEntry  = flip != 0 and trend == 1
shortEntry = flip != 0 and trend == -1
longExit   = flip != 0 and trend == -1
shortExit  = flip != 0 and trend == 1


if (longEntry)
    strategy.entry("Long", strategy.long, qty=contractQty)
if (shortEntry)
    strategy.entry("Short", strategy.short, qty=contractQty)
if (longExit)
    strategy.close("Long")
if (shortExit)
    strategy.close("Short")

// === PLOTTING ===
plot(trend == 1 ? st : na, title="Uptrend", color=color.green, linewidth=2, style=plot.style_linebr)
plot(trend == -1 ? st : na, title="Downtrend", color=color.red, linewidth=2, style=plot.style_linebr)

plotshape(ta.change(trend) != 0 ? st : na, title="Trend Flip Marker", style=shape.triangleup, location=location.absolute, color=color.yellow)

// === LABELING PARAMS (for visualization/debug) ===
var label paramLabel = na
label.delete(paramLabel[1])
paramLabel := label.new(bar_index, high, str.format("ATR={0}  Mult={1,number,#.##}", targetLen, currFactor), yloc=yloc.abovebar, style=label.style_label_left, size=size.small, color=color.gray)


// Stats table
showStats = input.bool(true, title="Show Stats Table?")
var table statsTable = table.new(position.top_right, 2, 7, border_width=1)

if showStats and bar_index % 5 == 0
    totalTrades = strategy.closedtrades
    wins = strategy.wintrades
    losses = strategy.losstrades
    winRate = totalTrades > 0 ? (wins / totalTrades) * 100 : 0.0
    netProfit = strategy.netprofit
    avgProfit = totalTrades > 0 ? netProfit / totalTrades : 0.0
    colorNet = netProfit > 0 ? color.green : color.red
    colorWin = winRate > 50 ? color.green : color.red
    colorAvg = avgProfit > 0 ? color.green : color.red
    perfRating = winRate > 60 and netProfit > 0 ? "★ Excellent" : winRate > 50 ? "✓ Good" : "⚠️ Weak"
    netProfitPct = (netProfit / strategy.initial_capital) * 100

    table.cell(statsTable, 0, 0, "Total Trades", text_color=color.white)
    table.cell(statsTable, 1, 0, str.tostring(totalTrades), text_color=color.white)
    table.cell(statsTable, 0, 1, "Wins", text_color=color.white)
    table.cell(statsTable, 1, 1, str.tostring(wins), text_color=color.green)
    table.cell(statsTable, 0, 2, "Losses", text_color=color.white)
    table.cell(statsTable, 1, 2, str.tostring(losses), text_color=color.red)
    table.cell(statsTable, 0, 3, "Win Rate", text_color=color.white)
    table.cell(statsTable, 1, 3, str.tostring(winRate, "#.##") + "%", text_color=colorWin)
    table.cell(statsTable, 0, 4, "Net Profit", text_color=color.white)
    table.cell(statsTable, 1, 4, str.tostring(netProfit, "#.##"), text_color=colorNet)
    table.cell(statsTable, 0, 5, "Rating", text_color=color.white)
    table.cell(statsTable, 1, 5, perfRating, text_color=color.yellow)
    table.cell(statsTable, 0, 6, "Profit %", text_color=color.white)
    table.cell(statsTable, 1, 6, str.tostring(netProfitPct, "#.##") + "%", text_color=colorNet)