// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © shubhamtaywade82

//@version=6
strategy("* Swing+Positional MultiStrategy NSE (Enhanced v3)",
 overlay = true,
 default_qty_type = strategy.fixed,
 default_qty_value = 10,
 commission_type = strategy.commission.percent,
 commission_value = 0.03,
 pyramiding = 0,
 calc_on_every_tick = true)

secType = syminfo.type

//──────────────────── 1 • MARKET HOURS ────────────────────
marketOpen  = timestamp("Asia/Kolkata", year, month, dayofmonth,  9, 15)
marketClose = timestamp("Asia/Kolkata", year, month, dayofmonth, 15, 30)
inSession   = time >= marketOpen and time <= marketClose

//──────────────────── 2 • INPUTS ───────────────────────────
// Strategy toggles
grpCore = "① Strategy Toggles"
respectSession = input.bool(true, "Respect NSE session (09:15–15:30)", group = grpCore)
if secType == "crypto"
    respectSession := false

useST  = input.bool(true , "Supertrend"       , group = grpCore)
useEMA = input.bool(false , "EMA Crossover"    , group = grpCore)
useRM  = input.bool(false, "RSI-MACD Combo"   , group = grpCore)


// ADX + HTF Bias Filters
useAdxFilter  = input.bool(true , "Enable ADX Filter?" , group = grpCore)
adxDIlen    = input.int(14, "DI Length", group=grpCore)
adxSmoothing = input.int(14, "ADX Smoothing", group=grpCore)
minAdx        = input.int (20   , "Min ADX", minval = 5, group = grpCore)
useTrendBias  = input.bool(true , "Enable HTF Trend Filter?" , group = grpCore)
htfTF         = input.timeframe("15", "HTF Timeframe", group = grpCore)

// Supertrend
grpST     = "② Supertrend Settings"
stAtrLen  = input.int  (10 , "ATR Length", group = grpST)
stFactor  = input.float(1.5, "Multiplier", group = grpST)

// EMA crossover
grpEMA    = "③ EMA Settings"
emaFastLen = input.int(9 , "Fast EMA", group = grpEMA)
emaSlowLen = input.int(21, "Slow EMA", group = grpEMA)

// Exit Engine
grpExit     = "④ Exit Engine"
enableExit  = input.bool(true, "Enable Exits?", group = grpExit)
exitStyle   = input.string("percent", "Exit Style", options=["percent","atr"], group=grpExit)
slPct       = input.float(2.0, "SL %", group=grpExit, inline="sl")
tpPct       = input.float(4.0, "TP %", group=grpExit, inline="tp")
slATRmult   = input.float(1.5, "SL × ATR", group=grpExit)
tpATRmult   = input.float(3.0, "TP × ATR", group=grpExit)

// Debug
showDebug   = input.bool(true, "Show Debug Overlay?", group="⑤ Debug / Stats")
enableStats = input.bool(true, "Show Stats Table?", group="⑤ Debug / Stats")

//──────────────────── 3 • INDICATORS ───────────────────────
// Supertrend
[stLine, _] = ta.supertrend(stFactor, stAtrLen)
longST  = ta.crossover(close, stLine)
shortST = ta.crossunder(close, stLine)

// EMA Crossover
emaFast  = ta.ema(close, emaFastLen)
emaSlow  = ta.ema(close, emaSlowLen)
longEMA  = ta.crossover(emaFast, emaSlow)
shortEMA = ta.crossunder(emaFast, emaSlow)

// RSI + MACD
rsi           = ta.rsi(close, 14)
[macdL, macdS, _] = ta.macd(close, 12, 26, 9)
longRM  = rsi < 35 and macdL > macdS
shortRM = rsi > 65 and macdL < macdS

// ADX Filter
[plusDI, minusDI, adx] = ta.dmi(adxDIlen, adxSmoothing)
adxOkay = not useAdxFilter or adx > minAdx

// HTF Trend Filter
htfEma = request.security(syminfo.tickerid, htfTF, ta.ema(close, 50))
biasOkay = not useTrendBias or (close > htfEma)

// ATR
atrVal = ta.atr(14)

//──────────────────── 4 • ENTRY CONDITIONS ─────────────────
sessionOk = respectSession ? inSession : true

enterLong  = sessionOk and adxOkay and biasOkay and ((useST  and longST ) or (useEMA and longEMA) or (useRM  and longRM ) )

enterShort = sessionOk and adxOkay and biasOkay and ((useST  and shortST ) or(useEMA and shortEMA) or(useRM  and shortRM ))

//──────────────────── 5 • EXITS ────────────────────────────
var idLong  = "LONG"
var idShort = "SHORT"

if enableExit and exitStyle == "percent"
    strategy.exit("L-exit", from_entry = idLong , stop = close * (1 - slPct/100), limit = close * (1 + tpPct/100))
    strategy.exit("S-exit", from_entry = idShort, stop = close * (1 + slPct/100), limit = close * (1 - tpPct/100))

if enableExit and exitStyle == "atr"
    strategy.exit("L-exit", from_entry = idLong , stop = close - slATRmult*atrVal, limit = close + tpATRmult*atrVal)
    strategy.exit("S-exit", from_entry = idShort, stop = close + slATRmult*atrVal, limit = close - tpATRmult*atrVal)

//──────────────────── 6 • EXECUTION ────────────────────────
if enterLong
    strategy.entry(idLong , strategy.long)
if enterShort
    strategy.entry(idShort, strategy.short)

//──────────────────── 7 • DEBUG + SL PLOTS ─────────────────
plot(showDebug ? stLine : na, "Supertrend", color = color.orange, linewidth = 2)

slLong = showDebug and enableExit and strategy.position_size > 0
         ? strategy.position_avg_price - (exitStyle == "percent" ? close * slPct / 100 : slATRmult * atrVal)
         : na
slShort = showDebug and enableExit and strategy.position_size < 0
         ? strategy.position_avg_price + (exitStyle == "percent" ? close * slPct / 100 : slATRmult * atrVal)
         : na

plot(slLong , "SL-Long" , color=color.red , style=plot.style_linebr)
plot(slShort, "SL-Short", color=color.red , style=plot.style_linebr)

plot(showDebug ? adx : na, "ADX", color=color.red)
plot(showDebug ? plusDI : na, "+DI", color=color.green)
plot(showDebug ? minusDI : na, "-DI", color=color.orange)

//──────────────────── 8 • STATS DASHBOARD ─────────────────
var table statsT = table.new(position.top_right, 2, 6, border_width = 1)

if enableStats and bar_index % 5 == 0
    total    = strategy.closedtrades
    wins     = strategy.wintrades
    losses   = strategy.losstrades
    winRate  = total > 0 ? wins / total * 100 : 0
    avgPnl   = total > 0 ? strategy.netprofit / total : 0
    netPnl   = strategy.netprofit

    bgTbl    = color.new(color.black, 75)
    clrWinRt = winRate > 50 ? color.green : color.orange
    clrNet   = netPnl > 0  ? color.green : color.red
    clrAvg   = avgPnl > 0 ? color.green : color.red

    table.cell(statsT, 0, 0, "Total Trades", text_color=color.white, bgcolor=bgTbl, text_halign=text.align_left)
    table.cell(statsT, 1, 0, str.tostring(total) , text_color=color.white, bgcolor=bgTbl)
    table.cell(statsT, 0, 1, "Wins"        , text_color=color.white, bgcolor=bgTbl, text_halign=text.align_left)
    table.cell(statsT, 1, 1, str.tostring(wins)  , text_color=color.white, bgcolor=bgTbl)
    table.cell(statsT, 0, 2, "Losses"      , text_color=color.white, bgcolor=bgTbl, text_halign=text.align_left)
    table.cell(statsT, 1, 2, str.tostring(losses), text_color=color.white, bgcolor=bgTbl)
    table.cell(statsT, 0, 3, "Win Rate"    , text_color=color.white, bgcolor=bgTbl, text_halign=text.align_left)
    table.cell(statsT, 1, 3, str.tostring(winRate, "#.##")+"%", text_color=clrWinRt, bgcolor=bgTbl)
    table.cell(statsT, 0, 4, "Avg P/L"     , text_color=color.white, bgcolor=bgTbl, text_halign=text.align_left)
    table.cell(statsT, 1, 4, str.tostring(avgPnl, "#.##"), text_color=clrAvg, bgcolor=bgTbl)
    table.cell(statsT, 0, 5, "Net P/L"     , text_color=color.white, bgcolor=bgTbl, text_halign=text.align_left)
    table.cell(statsT, 1, 5, str.tostring(netPnl, "#.##"), text_color=clrNet, bgcolor=bgTbl)
