// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © shubhamtaywade82

//@version=6
strategy("Machine Learning Adaptive SuperTrend Scalping", overlay=true, default_qty_type=strategy.fixed, default_qty_value=10, calc_on_every_tick = true)

// Import TA Library
import TradingView/ta/7

// Supertrend & ATR Settings
atr_len = input.int(10, "ATR Length", group="SuperTrend Settings")
fact = input.float(3, "SuperTrend Factor", group="SuperTrend Settings")

// K-Means Machine Learning Settings
training_data_period = input.int(100, "Training Data Length", group="K-Means Settings")
highvol = input.float(0.75, "High Volatility Percentile", maxval=1, group="K-Means Settings")
midvol = input.float(0.5, "Medium Volatility Percentile", maxval=1, group="K-Means Settings")
lowvol = input.float(0.25, "Low Volatility Percentile", maxval=1, group="K-Means Settings")

// ATR Calculation
volatility = ta.atr(atr_len)
upper = ta.highest(volatility, training_data_period)
lower = ta.lowest(volatility, training_data_period)

// K-Means Cluster Assignments
high_volatility = lower + (upper-lower) * highvol
medium_volatility = lower + (upper-lower) * midvol
low_volatility = lower + (upper-lower) * lowvol

// Supertrend Calculation
pine_supertrend(factor, atr) =>
    src = hl2
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])
    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int _direction = na
    float superTrend = na
    prevSuperTrend = superTrend[1]
    if na(atr[1])
        _direction := 1
    else if prevSuperTrend == prevUpperBand
        _direction := close > upperBand ? -1 : 1
    else
        _direction := close < lowerBand ? 1 : -1
    superTrend := _direction == -1 ? lowerBand : upperBand
    [superTrend, _direction]

// Assign ATR Cluster for SuperTrend Calculation
[ST, dir] = pine_supertrend(fact, medium_volatility)

// Dynamic Stop Loss & Take Profit Based on ATR
stopLossATR = input.float(1.5, "Stop Loss ATR Multiplier", minval=0.1, maxval=5.0, step=0.1)
takeProfitATR = input.float(3.0, "Take Profit ATR Multiplier", minval=0.1, maxval=10.0, step=0.1)

longSL = close - (volatility * stopLossATR)
longTP = close + (volatility * takeProfitATR)
shortSL = close + (volatility * stopLossATR)
shortTP = close - (volatility * takeProfitATR)

// JSON ALERT FUNCTION (For Delta Exchange)
jsonAlert(action, qty) =>
    '{"symbol":"' + syminfo.ticker + '",' + '"side":"' + action + '",' +'"qty":"' + str.tostring(qty) + '",' + '"trigger_time":"' + str.format_time(time, "yyyy-MM-dd HH:mm:ss") + '",' + '"strategy_id":"557fd77e6db52c090960ed978d2bcadd"}'
// ENTRY CONDITIONS
if ta.change(dir) < 0
    strategy.entry("Long Entry", strategy.long)
    alert(jsonAlert("buy", 1), alert.freq_once_per_bar_close)

if ta.change(dir) > 0
    strategy.entry("Short Entry", strategy.short)
    alert(jsonAlert("sell", 1), alert.freq_once_per_bar_close)

// EXIT CONDITIONS
exitLongCondition = ta.change(dir) > 0
exitShortCondition = ta.change(dir) < 0

if strategy.position_size > 0 and exitLongCondition
    strategy.exit("Long Exit", "Long Entry", stop=longSL, limit=longTP)

if strategy.position_size < 0 and exitShortCondition
    strategy.exit("Short Exit", "Short Entry", stop=shortSL, limit=shortTP)

// PLOT THE SUPER TREND
plot(dir > 0 ? ST : na, title="Supertrend (Bullish)", color=color.green, linewidth=2, style = plot.style_linebr)
plot(dir < 0 ? ST : na, title="Supertrend (Bearish)", color=color.red, linewidth=2, style = plot.style_linebr)

// Stats table
showStats = input.bool(true, title="Show Stats Table?")
var table statsTable = table.new(position.top_right, 2, 7, border_width=1)

if showStats and bar_index % 5 == 0
    totalTrades = strategy.closedtrades
    wins = strategy.wintrades
    losses = strategy.losstrades
    winRate = totalTrades > 0 ? (wins / totalTrades) * 100 : 0.0
    netProfit = strategy.netprofit
    avgProfit = totalTrades > 0 ? netProfit / totalTrades : 0.0
    colorNet = netProfit > 0 ? color.green : color.red
    colorWin = winRate > 50 ? color.green : color.red
    colorAvg = avgProfit > 0 ? color.green : color.red
    perfRating = winRate > 60 and netProfit > 0 ? "★ Excellent" : winRate > 50 ? "✓ Good" : "⚠️ Weak"
    netProfitPct = (netProfit / strategy.initial_capital) * 100

    table.cell(statsTable, 0, 0, "Total Trades", text_color=color.white)
    table.cell(statsTable, 1, 0, str.tostring(totalTrades), text_color=color.white)
    table.cell(statsTable, 0, 1, "Wins", text_color=color.white)
    table.cell(statsTable, 1, 1, str.tostring(wins), text_color=color.green)
    table.cell(statsTable, 0, 2, "Losses", text_color=color.white)
    table.cell(statsTable, 1, 2, str.tostring(losses), text_color=color.red)
    table.cell(statsTable, 0, 3, "Win Rate", text_color=color.white)
    table.cell(statsTable, 1, 3, str.tostring(winRate, "#.##") + "%", text_color=colorWin)
    table.cell(statsTable, 0, 4, "Net Profit", text_color=color.white)
    table.cell(statsTable, 1, 4, str.tostring(netProfit, "#.##"), text_color=colorNet)
    table.cell(statsTable, 0, 5, "Rating", text_color=color.white)
    table.cell(statsTable, 1, 5, perfRating, text_color=color.yellow)
    table.cell(statsTable, 0, 6, "Profit %", text_color=color.white)
    table.cell(statsTable, 1, 6, str.tostring(netProfitPct, "#.##") + "%", text_color=colorNet)